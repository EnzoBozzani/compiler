patterns: list[tuple[str, str]] = [
    ('if_reserved', 'if'),
    ('else_reserved', 'else'),
    ('number_reserved', 'number'),
    ('string_reserved', 'string'),
    ('while_reserved', 'while'),
    ('for_reserved', 'for'),
    ('in_reserved', 'in'),
    ('bool_reserved', 'bool'),
    ('true', 'true'),
    ('false', 'false'),
    ('op', '('),
    ('cp', ')'),
    ('gt', '>'),
    ('attr', '='),
    ('equal', '=='),
    ('gte', '>='),
    ('lte', '<='),
    ('lt', '<'),
    ('open_curly_braces', '{'),
    ('close_curly_braces', '}'),
    ('string', '".*"'),
    ('add', '+'),
    ('sub', '-'),
    ('mult', '*'),
    ('div', '/'),
    ('number', '(0-9)+ | (0-9)*.(0-9)+'),
    ('id', '(a-z|A-Z)(a-z|A-Z|0-9|_)*')
]

unique_patterns: list[tuple[str, str]] = [
    ('op', '('),
    ('cp', ')'),
    ('add', '+'),
    ('sub', '-'),
    ('mult', '*'),
    ('div', '/'),
    ('open_curly_braces', '{'),
    ('close_curly_braces', '}'),
    ('gt', '>'),
    ('attr', '='),
    ('equal', '=='),
    ('gte', '>='),
    ('lte', '<='),
    ('lt', '<'),
]

grammar: dict[str, list[str]] = {
    'math_e': ['math_t math_e*'],
    'math_e*': ['add math_t math_e*', 'sub math_t math_e*', None],
    'math_t': ['math_f math_t*'],
    'math_t*': ['mult math_f math_t*', 'div math_f math_t*', None],
    'math_f': ['op math_e cp', 'math_n'],
    'math_n': ['math_d math_n*'],
    'math_n*': ['math_d math_n*', None],
    'math_d': ['id', 'number'],
    'value': ['number', 'id', 'true', 'false', 'math_e', 'string'],
    'condition': ['value condition*'],
    'condition*': ['comparison_operator value', None],
    'comparison_operator': ['gt', 'equal', 'gte', 'lte', 'lt'],
    'if': ['if_reserved op condition cp open_curly_braces * close_curly_braces else'],
    'else': ['else*', None],
    'else*': ['else_reserved open_curly_braces * close_curly_braces'],
    '*': [None],
    'type': ['number_reserved', 'bool_reserved', 'string_reserved'],
    'attr_expression': ['type id attr value', 'id attr value'],
    'init_expression': ['type id'],
    'while': ['while_reserved op condition cp open_curly_braces * close_curly_braces'],
    'for': ['for_reserved op id in_reserved id cp open_curly_braces * close_curly_braces']
    # TODO: else if, output(), input()
}
